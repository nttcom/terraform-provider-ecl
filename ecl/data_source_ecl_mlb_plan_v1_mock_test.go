/*
Generated by https://github.com/tamac-io/openapi-to-terraform-rb
*/
package ecl

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform/helper/resource"

	"github.com/nttcom/terraform-provider-ecl/ecl/testhelper/mock"
)

func TestMockedAccMLBV1PlanDataSource(t *testing.T) {
	mc := mock.NewMockController()
	defer mc.TerminateMockControllerSafety()

	postKeystone := fmt.Sprintf(fakeKeystonePostTmpl, mc.Endpoint(), OS_REGION_NAME)

	mc.Register(t, "keystone", "/v3/auth/tokens", postKeystone)
	mc.Register(t, "plans", "/v1.0/plans", testMockMLBV1PlansListNameQuery)

	mc.StartServer(t)

	resource.Test(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccMLBV1PlanDataSourceQueryName,
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttrSet("data.ecl_mlb_plan_v1.plan_1", "id"),
					resource.TestCheckResourceAttr("data.ecl_mlb_plan_v1.plan_1", "name", "50M_HA_4IF"),
					resource.TestCheckResourceAttr("data.ecl_mlb_plan_v1.plan_1", "description", "description"),
					resource.TestCheckResourceAttr("data.ecl_mlb_plan_v1.plan_1", "bandwidth", "50M"),
					resource.TestCheckResourceAttr("data.ecl_mlb_plan_v1.plan_1", "redundancy", "HA"),
					resource.TestCheckResourceAttr("data.ecl_mlb_plan_v1.plan_1", "max_number_of_interfaces", "4"),
					resource.TestCheckResourceAttr("data.ecl_mlb_plan_v1.plan_1", "max_number_of_health_monitors", "50"),
					resource.TestCheckResourceAttr("data.ecl_mlb_plan_v1.plan_1", "max_number_of_listeners", "50"),
					resource.TestCheckResourceAttr("data.ecl_mlb_plan_v1.plan_1", "max_number_of_policies", "50"),
					resource.TestCheckResourceAttr("data.ecl_mlb_plan_v1.plan_1", "max_number_of_routes", "25"),
					resource.TestCheckResourceAttr("data.ecl_mlb_plan_v1.plan_1", "max_number_of_target_groups", "50"),
					resource.TestCheckResourceAttr("data.ecl_mlb_plan_v1.plan_1", "max_number_of_members", "100"),
					resource.TestCheckResourceAttr("data.ecl_mlb_plan_v1.plan_1", "max_number_of_rules", "50"),
					resource.TestCheckResourceAttr("data.ecl_mlb_plan_v1.plan_1", "max_number_of_conditions", "5"),
					resource.TestCheckResourceAttr("data.ecl_mlb_plan_v1.plan_1", "enabled", "true"),
				),
			},
		},
	})
}

var testAccMLBV1PlanDataSourceQueryName = fmt.Sprintf(`
data "ecl_mlb_plan_v1" "plan_1" {
  name = "50M_HA_4IF"
}
`)

var testMockMLBV1PlansListNameQuery = fmt.Sprintf(`
request:
  method: GET
  query:
    name:
      - 50M_HA_4IF
response:
  code: 200
  body: >
    {
      "plans": [
        {
          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
          "name": "50M_HA_4IF",
          "description": "description",
          "bandwidth": "50M",
          "redundancy": "HA",
          "max_number_of_interfaces": 4,
          "max_number_of_health_monitors": 50,
          "max_number_of_listeners": 50,
          "max_number_of_policies": 50,
          "max_number_of_routes": 25,
          "max_number_of_target_groups": 50,
          "max_number_of_members": 100,
          "max_number_of_rules": 50,
          "max_number_of_conditions": 5,
          "enabled": true
        }
      ]
    }
`)
